# Docker Compose file for running tests in a CI/CD environment (GitHub Actions).
# This file orchestrates the test environment and the ELK stack for log collection.

services:
  # PostgreSQL database service.
  db:
    image: postgres:15-alpine
    container_name: taskmanager-db
    environment:
      POSTGRES_DB: taskmanager
      POSTGRES_USER: taskuser
      POSTGRES_PASSWORD: taskpass
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U taskuser -d taskmanager"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - test-network
    logging: &gelf-logging # Define a logging anchor for the GELF driver.
      driver: gelf
      options:
        gelf-address: "udp://127.0.0.1:12201"

  # Task Manager application service.
  app:
    image: ghcr.io/sergey-ked-by/taskmanager-app:${APP_IMAGE_TAG:-latest}
    container_name: taskmanager-app
    depends_on:
      db:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_JPA_HIBERNATE_DDL_AUTO=validate
      - SPRING_FLYWAY_ENABLED=true
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - test-network
    logging:
      <<: *gelf-logging

  # The Selenoid service for running browsers in Docker containers.
  selenoid:
    build:
      context: .
      dockerfile: Dockerfile.selenoid
    container_name: taskmanager-selenoid
    ports:
      - "4444:4444"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    healthcheck:
      test: ["CMD-SHELL", "wget --spider -q http://localhost:4444/status || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    command: [ "-limit", "4", "-container-network", "taskmanager-tests_test-network"]
    networks:
        - test-network
    logging:
      <<: *gelf-logging

  # Test runner service for executing tests.
  tests:
    build:
      context: .
      dockerfile: Dockerfile.tests
    container_name: taskmanager-tests
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "./selenoid/config:/config:ro"
      - "./build:/app/build"
    depends_on:
      app:
        condition: service_healthy
      selenoid:
        condition: service_healthy
      logstash:
        condition: service_started # Wait for logstash to be ready
    environment:
      - GRADLE_USER_HOME=/app/.gradle
    networks:
      - test-network
    entrypoint: /app/entrypoint-tests.sh # Use the robust entrypoint script.
    logging:
      <<: *gelf-logging

  # --- ELK STACK FOR LOGGING ---

  # Logstash service for processing and forwarding logs from all containers.
  logstash:
    image: logstash:7.17.5
    container_name: taskmanager-logstash
    ports:
      - "12201:12201/udp"
    volumes:
      - ./logstash/pipeline:/usr/share/logstash/pipeline:ro
    depends_on:
      elasticsearch:
        condition: service_started
    networks:
      - test-network

  # Elasticsearch service for storing and indexing logs.
  elasticsearch:
    image: elasticsearch:7.17.5
    container_name: taskmanager-elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    networks:
      - test-network
    ports:
      - "9200:9200"

  # Kibana service for visualizing logs (can be removed in CI if not needed for reports).
  kibana:
    image: kibana:7.17.5
    container_name: taskmanager-kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    networks:
      - test-network
    ports:
      - "5601:5601"
    depends_on:
      elasticsearch:
        condition: service_started

networks:
  test-network:
    driver: bridge

volumes:
  pgdata: